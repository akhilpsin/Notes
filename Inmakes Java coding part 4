CODING CHALLENGE QUESTIONS :PART4

1. Java Program to Insert an Element at the Specified Position in a LinkedList:

import java.util.LinkedList;  
  
public class Main {  
    public static void main(String[] args) {  
        LinkedList<String> list = new LinkedList<>();  
        list.add("First");  
        list.add("Second");  
        list.add("Third");  
  
        // Insert an element at the 2nd position (index starts from 0)  
        list.add(1, "Inserted");  
  
        System.out.println(list);  
    }  
}  
 
2. Java Program to Test if an ArrayList is Empty or Not:

import java.util.ArrayList;  
  
public class Main {  
    public static void main(String[] args) {  
        ArrayList<String> list = new ArrayList<>();  
  
        // Check if the list is empty  
        if (list.isEmpty()) {  
            System.out.println("The ArrayList is empty.");  
        } else {  
            System.out.println("The ArrayList is not empty.");  
        }  
          
        // Adding an element and checking again  
        list.add("Element");  
          
        if (list.isEmpty()) {  
            System.out.println("The ArrayList is empty.");  
        } else {  
            System.out.println("The ArrayList is not empty.");  
        }  
    }  
}  
 
3. Java Program to Convert a HashSet to an ArrayList:

import java.util.ArrayList;  
import java.util.HashSet;  
import java.util.List;  
  
public class Main {  
    public static void main(String[] args) {  
        HashSet<String> hashSet = new HashSet<>();  
        hashSet.add("One");  
        hashSet.add("Two");  
        hashSet.add("Three");  
  
        // Convert HashSet to ArrayList  
        List<String> list = new ArrayList<>(hashSet);  
  
        System.out.println(list);  
    }  
}  
 
4. Program to Sort HashMap by Keys:

import java.util.HashMap;  
import java.util.Map;  
import java.util.TreeMap;  
  
public class Main {  
    public static void main(String[] args) {  
        HashMap<String, Integer> hashMap = new HashMap<>();  
        hashMap.put("One", 1);  
        hashMap.put("Three", 3);  
        hashMap.put("Two", 2);  
  
        // Sort HashMap by keys using TreeMap  
        TreeMap<String, Integer> sortedMap = new TreeMap<>(hashMap);  
  
        for (Map.Entry<String, Integer> entry : sortedMap.entrySet()) {  
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());  
        }  
    }  
}  
 
5. Program to Iterate TreeMap in Java:

import java.util.Map;  
import java.util.TreeMap;  
  
public class Main {  
    public static void main(String[] args) {  
        TreeMap<String, Integer> treeMap = new TreeMap<>();  
        treeMap.put("One", 1);  
        treeMap.put("Two", 2);  
        treeMap.put("Three", 3);  
  
        // Iterate over TreeMap  
        for (Map.Entry<String, Integer> entry : treeMap.entrySet()) {  
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());  
        }  
    }  
}  
 
6. Program to Sort ArrayList Using Comparable and Comparator Interface:

import java.util.ArrayList;  
import java.util.Collections;  
import java.util.Comparator;  
import java.util.List;  
  
class Person implements Comparable<Person> {  
    String name;  
    int age;  
  
    public Person(String name, int age) {  
        this.name = name;  
        this.age = age;  
    }  
   
    @Override  
    public int compareTo(Person other) {  
        return Integer.compare(this.age, other.age);  
    }  
  
    @Override  
    public String toString() {  
        return "Person{name='" + name + "', age=" + age + '}';  
    }  
}  
  
public class Main {  
    public static void main(String[] args) {  
        List<Person> people
